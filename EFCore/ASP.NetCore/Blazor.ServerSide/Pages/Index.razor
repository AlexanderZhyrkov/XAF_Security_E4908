@page "/"
@attribute [Authorize]
@inject SecuredObjectSpaceService objectSpaceService;

<div style="text-align:right; margin: 10px">
    <a class="ml-md-auto btn btn-primary" href="/logout">Log Out</a>
</div>

<DxDataGrid Data="employees" KeyFieldName="@nameof(Employee.ID)" PageSize="20" ShowFilterRow="true" AllowSort="true" @ref="grid">
    <ChildContent>
        <DxDataGridColumn Field="@nameof(Employee.FirstName)">
            <DisplayTemplate>
                <SecuredContainer Context="readOnly" CurrentObject="@context" PropertyName="@nameof(Employee.FirstName)">
                    @(((Employee)context).FirstName)
                </SecuredContainer>
            </DisplayTemplate>
        </DxDataGridColumn>
        <DxDataGridColumn Field="@nameof(Employee.LastName)">
            <DisplayTemplate>
                <SecuredContainer Context="readOnly" CurrentObject="@context" PropertyName="@nameof(Employee.LastName)">
                    @(((Employee)context).LastName)
                </SecuredContainer>
            </DisplayTemplate>
        </DxDataGridColumn>
        <DxDataGridColumn Field="@nameof(Employee.Email)">
            <DisplayTemplate>
                <SecuredContainer Context="readOnly" CurrentObject="@context" PropertyName="@nameof(Employee.Email)">
                    @(((Employee)context).Email)
                </SecuredContainer>
            </DisplayTemplate>
        </DxDataGridColumn>
        <DxDataGridComboBoxColumn Field="@nameof(Employee.Department)" Data="@departments">
            <DisplayTemplate>
                <SecuredContainer Context="readOnly" CurrentObject="@context" PropertyName="@nameof(Employee.Department)">
                    @(CaptionHelper.GetDisplayText(((Employee)context).Department))
                </SecuredContainer>
            </DisplayTemplate>
        </DxDataGridComboBoxColumn>
        <DxDataGridCommandColumn Width="100px">
            <HeaderCellTemplate>
                @if(objectSpaceService.CanCreate<Employee>()) {
                    <button class="btn btn-link" @onclick="@(() => StartRowEdit(null))">New</button>
                }
            </HeaderCellTemplate>
            <CellTemplate>
                @if(objectSpaceService.CanWrite(context)) {
                    <a @onclick="@(() => StartRowEdit(context))" href="javascript:;">Edit </a>
                }
                @if(objectSpaceService.CanDelete(context)) {
                    <a @onclick="@(() => OnRowRemoving(context))" href="javascript:;">Delete</a>
                }
            </CellTemplate>
        </DxDataGridCommandColumn>
    </ChildContent>
    <EditFormTemplate Context="employeeContext">
        @{
            <EditForm Model=employee Context="EditFormContext" OnValidSubmit="@HandleValidSubmit">
                <DxFormLayout>
                    <DxFormLayoutItem Caption="First Name">
                        <Template>
                            <SecuredContainer Context="readOnly" CurrentObject=@employee PropertyName=@nameof(Employee.FirstName) IsEditor=true IsNewObject="@isNewRowEditing">
                                <DxTextBox @bind-Text=employee.FirstName ReadOnly=@readOnly />
                            </SecuredContainer>
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Last Name">
                        <Template>
                            <SecuredContainer Context="readOnly" CurrentObject=@employee PropertyName=@nameof(Employee.LastName) IsEditor=true IsNewObject="@isNewRowEditing">
                                <DxTextBox @bind-Text=employee.LastName ReadOnly=@readOnly />
                            </SecuredContainer>
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Email">
                        <Template>
                            <SecuredContainer Context="readOnly" CurrentObject=@employee PropertyName=@nameof(Employee.Email) IsEditor=true IsNewObject="@isNewRowEditing">
                                <DxTextBox @bind-Text=employee.Email ReadOnly=@readOnly />
                            </SecuredContainer>
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Department">
                        <Template>
                            <SecuredContainer Context="readOnly" CurrentObject=@employee PropertyName=@nameof(Employee.Department) IsEditor=true IsNewObject="@isNewRowEditing">
                                <DxComboBox Data="@departments" ReadOnly=@readOnly @bind-Value=employee.Department TextFieldName="@nameof(Department.Title)" />
                            </SecuredContainer>
                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem>
                        <Template>
                            <div class="dxbs-fl-ctrl dxbs-fl-ctrl-nc text-right">
                                @{
                                    string buttonCaption = isNewRowEditing ? "Create" : "Update";
                                    <button class="btn btn-link" type="submit">@buttonCaption</button>
                                }
                                <button class="btn btn-link" type="button" @onclick=CancelRowEdit>Cancel</button>
                            </div>
                        </Template>
                    </DxFormLayoutItem>
                </DxFormLayout>
            </EditForm>
        }
    </EditFormTemplate>
</DxDataGrid>

@code {
    IQueryable<Employee> employees;
    Department[] departments;
    Employee employee = null;
    DxDataGrid<Employee> grid;
    bool isNewRowEditing = false;

    protected override void OnInitialized() {
        employees = objectSpaceService.GetObjectsQuery<Employee>();
    }
    protected override async Task OnInitializedAsync() {
        departments = await objectSpaceService.GetObjectsAsync<Department>();
    }
    Task OnRowRemoving(object item) {
        objectSpaceService.Delete(item);
        return grid.Refresh();
    }
    async Task HandleValidSubmit() {
        objectSpaceService.SaveChanges(employee);
        await grid.Refresh();
        employee = null;
        await grid.CancelRowEdit();
    }
    Task StartRowEdit(object item) {
        employee = (Employee)item ?? new Employee();
        isNewRowEditing = item == null;
        return grid.StartRowEdit(item);
    }
    Task CancelRowEdit() {
        employee = null;
        return grid.CancelRowEdit();
    }
}
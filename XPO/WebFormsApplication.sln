---
uid: "113558"
seealso:
- linkId: "113711"
- linkId: "113709"
- linkId: "118741"
title: 'How to: .NET Role-based Access Control & User Authentication API for DevExpress XPO and Microsoft Entity Framework Core ORMs'
owner: Ekaterina Kiseleva
---
# How to: .NET Role-based Access Control & User Authentication API for DevExpress XPO and Microsoft Entity Framework Core ORMs

> [!Note]
<<<<<<< HEAD
> As a registered DevExpress.com user, you are entitled to a free copy of .NET Role-based Access Control & User Authentication API is available to registered DevExpress.com users powered by Entity Framework (EF Core) and DevExpress eXpressPersistent Objects ORM. For more information as well as a free free offer, follow the [.NET App Security API (Role-based Access Control) – Free Offer from DevExpress](https://www.devexpress.com/security-api-free) link.

### Refer to the following tutorials for more examples:
 
#### DevExpress XPO
 - [DevExtreme + ASP.NET Web API OData App](https://github.com/DevExpress-Examples/XAF_Security_E4908/blob/21.2.2-pre-21250%2B//XPO/ASP.NetCore/DevExtreme.OData)
 - [WinForms App](https://github.com/DevExpress-Examples/XAF_Security_E4908/blob/21.2.2-pre-21250%2B//XPO/WinForms)
 - [ASP.NET WebForms App](https://github.com/DevExpress-Examples/XAF_Security_E4908/blob/21.2.2-pre-21250%2B//XPO/ASP.NET/WebForms)
 - [ASP.NET Core MVC App](https://github.com/DevExpress-Examples/XAF_Security_E4908/blob/21.2.2-pre-21250%2B//XPO/ASP.NetCore/MVC)
 - [Blazor Server App](https://github.com/DevExpress-Examples/XAF_Security_E4908/blob/21.2.2-pre-21250%2B//XPO/ASP.NetCore/Blazor.ServerSide)
 - [Xamarin Forms App](https://github.com/DevExpress-Examples/XAF_Security_E4908/blob/21.2.2-pre-21250%2B//XPO/Xamarin.Forms)
 - [Console App](https://github.com/DevExpress-Examples/XAF_Security_E4908/blob/21.2.2-pre-21250%2B//XPO/Console)

#### Microsoft Entity Framework Core
- [DevExtreme + ASP.NET Web API OData App](https://github.com/DevExpress-Examples/XAF_Security_E4908/blob/21.2.2-pre-21250%2B//EFCore/ASP.NetCore/DevExtreme.OData)
- [WinForms App](https://github.com/DevExpress-Examples/XAF_Security_E4908/blob/21.2.2-pre-21250%2B//EFCore/WinForms)
- [ASP.NET Core MVC App](https://github.com/DevExpress-Examples/XAF_Security_E4908/blob/21.2.2-pre-21250%2B//EFCore/ASP.NetCore/MVC)
- [Blazor Server App](https://github.com/DevExpress-Examples/XAF_Security_E4908/blob/21.2.2-pre-21250%2B//EFCore/ASP.NetCore/Blazor.ServerSide)
- [Console App](https://github.com/DevExpress-Examples/XAF_Security_E4908/blob/21.2.2-pre-21250%2B//EFCore/Console)

See all examples and tutorials on the GitHub:

 [.NET Role-based Access Control & User Authentication API for DevExpress XPO and Microsoft Entity Framework Core ORMs](https://github.com/DevExpress-Examples/XAF_Security_E4908).
=======
> A complete sample project is available at [https://github.com/DevExpress-Examples/XAF_Security_E4908](https://github.com/DevExpress-Examples/XAF_Security_E4908).
>
> Refer to the following tutorials for more .NET Framework and .NET Core examples:
> 
> **eXpress Persistent Objects**
> * [DevExtreme + ASP.NET Web API OData](https://go.devexpress.com/XAF_Security_NonXAF_Series_2.aspx)
> * [WinForms](https://go.devexpress.com/XAF_Security_NonXAF_Series_3.aspx)
> * [ASP.NET Web Forms](https://go.devexpress.com/XAF_Security_NonXAF_Series_4_WebForms.aspx)
> * [ASP.NET Core MVC](https://go.devexpress.com/XAF_Security_NonXAF_Series_5_MVC_Core.aspx)
> * [Blazor Server](https://go.devexpress.com/XAF_Security_NonXAF_Series_6_Blazor_ServerSide.aspx)
> * [Console](https://go.devexpress.com/XAF_Security_NonXAF_Series_1.aspx)
> 
> **Entity Framework Core**
> * [WinForms](https://go.devexpress.com/XAF_Security_NonXAF_WinForms_EFCore.aspx)
> * [Console](https://go.devexpress.com/XAF_Security_NonXAF_Console_EFCore.aspx)

## Prerequisites

1. You have an XAF solution (for example, _XafSolution_) with the platform-agnostic module and WinForms or ASP.NET Web Forms application [projects](xref:118045). 
2. This solution uses XPO as an ORM system. 
3. The WinForms or ASP.NET Web Forms application uses the Integrated Mode of the Security System and [Standard authentication](xref:119064#standard-authentication).
4. There is an [active](xref:DevExpress.Persistent.BaseImpl.PermissionPolicy.PermissionPolicyUser.IsActive) user with the "User" name and an empty password.
5. Business objects are defined in the _XafSolution.Module_ project (for example, **Employee** and **Department**).
6. A database (_XafSolution_) is generated for these business objects.

## Create and Configure a Non-XAF Application

1. Create a console application.

2. Add the following code to the application's configuration file (_App.config_) to set a connection string.
	
	# [XML](#tab/tabid-xml)

	```xml
	<?xml version="1.0" encoding="utf-8" ?>
	<configuration>
	  <connectionStrings>
	    <add name="ConnectionString" connectionString="Data Source=DBSERVER;Initial Catalog=XafSolution;Integrated Security=True"/>
	  </connectionStrings>
	  <!-- ... -->
	</configuration>
	```
	***
	Replace `DBSERVER` with a database server name or its IP address. For example, use `localhost` or `(local)` for a local database server.

3. Reference the following assemblies:

	* [XafSolution.Module.dll](https://github.com/DevExpress-Examples/XAF_Security_E4908/tree/21.1.3+/XPO/XafSolution)
	* System.Configuration.dll
	* DevExpress.ExpressApp.v<:xx.x:>.dll
	* DevExpress.ExpressApp.Security.v<:xx.x:>.dll
	* DevExpress.ExpressApp.Security.Xpo.v<:xx.x:>.dll
	* DevExpress.ExpressApp.Xpo.v<:xx.x:>.dll
	* DevExpress.Persistent.BaseImpl.Xpo.v<:xx.x:>.dll

## Access Secured Data

Perform the following steps in the console application's [!include[](~/templates/file_program11174.md)] file. 

1. Initialize the [Types Info System](xref:113669) and use the @DevExpress.ExpressApp.DC.ITypesInfo.RegisterEntity(System.Type) method to register the business objects that should be accessible in this application. 

	# [C#](#tab/tabid-csharp)
	
	```csharp
	using DevExpress.ExpressApp;
	using DevExpress.ExpressApp.Xpo;
	using DevExpress.Persistent.BaseImpl.PermissionPolicy;
	using XafSolution.Module.BusinessObjects;
	//...
	static void Main(string[] args) {
		RegisterEntities();
		// ...
	}
	private static void RegisterEntities()        {
		XpoTypesInfoHelper.GetXpoTypeInfoSource();
		XafTypesInfo.Instance.RegisterEntity(typeof(Employee));
		XafTypesInfo.Instance.RegisterEntity(typeof(Department));
		XafTypesInfo.Instance.RegisterEntity(typeof(PermissionPolicyUser));
		XafTypesInfo.Instance.RegisterEntity(typeof(PermissionPolicyRole));
	}
	```
	
	# [VB.NET](#tab/tabid-vb)
	
	```vb
	Imports DevExpress.ExpressApp
	Imports DevExpress.ExpressApp.Xpo
	Imports DevExpress.Persistent.BaseImpl.PermissionPolicy
	Imports XafSolution.Module.BusinessObjects
	'...
	Shared Sub Main(ByVal args() As String)
		RegisterEntities()
		' ...
	End Sub
	Private Shared Sub RegisterEntities()
		XpoTypesInfoHelper.GetXpoTypeInfoSource()
		XafTypesInfo.Instance.RegisterEntity(GetType(Employee))
		XafTypesInfo.Instance.RegisterEntity(GetType(Department))
		XafTypesInfo.Instance.RegisterEntity(GetType(PermissionPolicyUser))
		XafTypesInfo.Instance.RegisterEntity(GetType(PermissionPolicyRole))
	End Sub
	```
	
	***

2. Initialize the Security System.

	# [C#](#tab/tabid-csharp)
	
	```csharp
	using DevExpress.ExpressApp.Security;
	// ...
	AuthenticationStandard authentication = new AuthenticationStandard();
	SecurityStrategyComplex security = new SecurityStrategyComplex(typeof(PermissionPolicyUser), typeof(PermissionPolicyRole), authentication);
	security.RegisterXPOAdapterProviders();
	```
	
	# [VB.NET](#tab/tabid-vb)
	
	```vb
	Imports DevExpress.ExpressApp.Security
	' ...
	Dim authentication As New AuthenticationStandard()
	Dim security As New SecurityStrategyComplex(GetType(PermissionPolicyUser), GetType(PermissionPolicyRole), authentication)
	security.RegisterXPOAdapterProviders()
	```
	
	***

3. Create the [SecuredObjectSpaceProvider](xref:DevExpress.ExpressApp.XafApplication.ObjectSpaceProvider) object. It allows you to logon and create **SecuredObjectSpace** to access secured data.

	# [C#](#tab/tabid-csharp)
	
	```csharp
	using System.Configuration;
	using DevExpress.ExpressApp.Security.ClientServer;
	// ...
	string connectionString = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
	SecuredObjectSpaceProvider objectSpaceProvider = new SecuredObjectSpaceProvider(security, connectionString, null);
	```
	
	# [VB.NET](#tab/tabid-vb)
	
	```vb
	Imports System.Configuration
	Imports DevExpress.ExpressApp.Security.ClientServer
	' ...
	Dim connectionString As String = ConfigurationManager.ConnectionStrings("ConnectionString").ConnectionString
	Dim objectSpaceProvider As New SecuredObjectSpaceProvider(security, connectionString, Nothing)
	```
	
	***

4. Perform a logon. 

	# [C#](#tab/tabid-csharp)
	
	```csharp
	string userName = "User";
	string password = string.Empty;
	authentication.SetLogonParameters(new AuthenticationStandardLogonParameters(userName, password));
	IObjectSpace loginObjectSpace = objectSpaceProvider.CreateObjectSpace();
	security.Logon(loginObjectSpace);
	```
	
	# [VB.NET](#tab/tabid-vb)
	
	```vb
	Dim userName As String = "User"
	Dim password As String = String.Empty
	authentication.SetLogonParameters(New AuthenticationStandardLogonParameters(userName, password))
	Dim loginObjectSpace As IObjectSpace = objectSpaceProvider.CreateObjectSpace()
	security.Logon(loginObjectSpace)
	```
	
	***

5. Create the **SecuredObjectSpace** object to operate with secured data.

	# [C#](#tab/tabid-csharp)
	
	```csharp
	using System.Text;
	// ...
	StringBuilder stringBuilder = new StringBuilder();
	stringBuilder.Append("List of the 'Employee' objects:\n");
	using(IObjectSpace securedObjectSpace = objectSpaceProvider.CreateObjectSpace()) {
		foreach(Employee employee in securedObjectSpace.GetObjects<Employee>()) {
			stringBuilder.Append(string.Format("Full name: {0}\n", employee.FullName));
			if(security.IsGranted(new PermissionRequest(securedObjectSpace, typeof(Employee), SecurityOperations.Read, employee, "Department"))) {
				stringBuilder.Append(string.Format("Department: {0}\n", employee.Department.Title));
			}
			else {
				stringBuilder.Append("Department: [Protected content]\n");
			}
		} 
	}
	```
	
	# [VB.NET](#tab/tabid-vb)
	
	```vb
	Imports System.Text
	' ...
	Dim stringBuilder As New StringBuilder()
	stringBuilder.Append("List of the 'Employee' objects:" & vbLf)
	Using securedObjectSpace As IObjectSpace = objectSpaceProvider.CreateObjectSpace()
		For Each employee As Employee In securedObjectSpace.GetObjects(Of Employee)()
			stringBuilder.Append(String.Format("Full name: {0}" & vbLf, employee.FullName))
			If security.IsGranted(New PermissionRequest(securedObjectSpace, GetType(Employee), SecurityOperations.Read, employee, "Department")) Then
				stringBuilder.Append(String.Format("Department: {0}" & vbLf, employee.Department.Title))
			Else
				stringBuilder.Append("Department: [Protected content]" & vbLf)
			End If
		Next employee
		file.Write(stringBuilder)
	End Using
	```
	
	***
	
	If a user was not allowed to read a property, the Secured Object Space returns the property default value. Use the [](xref:DevExpress.ExpressApp.Security.SecurityStrategy.IsGranted(DevExpress.ExpressApp.Security.IPermissionRequest)) method to display the "Protected content" placeholder instead of this value.
	
> [!IMPORTANT]
> Ensure that the static [EnableRfc2898 and SupportLegacySha512 properties](xref:112649) in your non-XAF application have the same values as those in the XAF application where the password was set. Otherwise, you will not be able to log in.
>>>>>>> 4b35a2cddf3e997709e086e9ca6f15f26c5fe604

Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.29424.173
MinimumVisualStudioVersion = 10.0.40219.1
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "CS", "CS", "{C19A292E-DA63-4CA4-B104-8F7CFEA75352}"
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "VB", "VB", "{58F44283-4412-499B-B31B-19DE620615D3}"
EndProject
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "BusinessObjectsLibrary", "BusinessObjectsLibrary\BusinessObjectsLibrary.csproj", "{D4ECC6B3-7F81-49AB-B157-667B85C30D26}"
EndProject
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "DatabaseUpdater", "DatabaseUpdater\DatabaseUpdater.csproj", "{106FE00A-214E-426A-B541-BFAEC7B2179D}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "WebFormsApplication", "ASP.NET\WebForms\CS\WebFormsApplication.csproj", "{E51366AC-F9F5-45BF-BA70-DB6B825DB38E}"
EndProject
Project("{F184B08F-C81C-45F6-A57F-5ABD9991F28F}") = "WebFormsApplication", "ASP.NET\WebForms\VB\WebFormsApplication.vbproj", "{B60E0B3C-F963-47AC-90CD-1681F432B617}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{D4ECC6B3-7F81-49AB-B157-667B85C30D26}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{D4ECC6B3-7F81-49AB-B157-667B85C30D26}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{D4ECC6B3-7F81-49AB-B157-667B85C30D26}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{D4ECC6B3-7F81-49AB-B157-667B85C30D26}.Release|Any CPU.Build.0 = Release|Any CPU
		{106FE00A-214E-426A-B541-BFAEC7B2179D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{106FE00A-214E-426A-B541-BFAEC7B2179D}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{106FE00A-214E-426A-B541-BFAEC7B2179D}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{106FE00A-214E-426A-B541-BFAEC7B2179D}.Release|Any CPU.Build.0 = Release|Any CPU
		{E51366AC-F9F5-45BF-BA70-DB6B825DB38E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{E51366AC-F9F5-45BF-BA70-DB6B825DB38E}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{E51366AC-F9F5-45BF-BA70-DB6B825DB38E}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{E51366AC-F9F5-45BF-BA70-DB6B825DB38E}.Release|Any CPU.Build.0 = Release|Any CPU
		{B60E0B3C-F963-47AC-90CD-1681F432B617}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{B60E0B3C-F963-47AC-90CD-1681F432B617}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{B60E0B3C-F963-47AC-90CD-1681F432B617}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{B60E0B3C-F963-47AC-90CD-1681F432B617}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(NestedProjects) = preSolution
		{E51366AC-F9F5-45BF-BA70-DB6B825DB38E} = {C19A292E-DA63-4CA4-B104-8F7CFEA75352}
		{B60E0B3C-F963-47AC-90CD-1681F432B617} = {58F44283-4412-499B-B31B-19DE620615D3}
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {72E7ACF8-5C91-4E10-951A-62160413D5A6}
	EndGlobalSection
EndGlobal
